@using Base.WebHelpers
@using App.Common.Enums
@using WebApp.Controllers
@using WebApp.ViewModels
@using App.BLL.DTO.Mappers
@using App.Common
@using App.BLL.DTO.Enums
@model WebApp.ViewModels.VideoViewModel

@{
    ViewBag.Title = $"{Model.Video.Title}";
}

@if (VideoCanBeEmbedded)
{
    <a asp-action="Watch" asp-route-id="@Model.Video.Id" asp-route-embedView="@(!Model.EmbedView)">
        @(Model.EmbedView ? App.Resources.WebApp.Views.Video.Watch.WatchArchived : App.Resources.WebApp.Views.Video.Watch.WatchOnPlatform)
    </a>
}
<div>
    @if (ShowEmbedView)
    {
        <iframe width="560" height="315" src="@(Model.Video.EmbedUrl ?? Model.Video.Url)" title="@Model.Video.Platform video player" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
    }
    else
    {
        <video controls width="560" height="315">
            <source src="/api/v1/File/VideoFile/@Model.Video.Id"/>
        </video>
    }
</div>

@if (User.Identity?.IsAuthenticated ?? false)
{
    <a asp-controller="Category" asp-action="ManageEntityCategories" asp-route-id="@Model.Video.Id" asp-route-entityType="@EEntityType.Video" asp-route-returnUrl="@Context.GetFullPath()">
        @App.Resources.WebApp.Views.Video.Watch.ManageCategories
    </a>
}

<partial name="_AuthorSummaryPartial" model="Model.Video.Author"/>

<br/>
<h1>@Model.Video.Title</h1>

<div>
    <div>
        @if (User.IsInRole(RoleNames.Admin) || User.IsInRole(RoleNames.SuperAdmin))
        {
            <form method="post" asp-action="SetPrivacyStatus">
                @Html.Hidden("id", Model.Video.Id)
                @Html.Hidden("returnUrl", Context.GetFullPath())
                <label for="status">@App.Resources.WebApp.Views.Video.Watch.SetArchivePrivacyStatus</label>
                <select name="status" id="status" asp-items="@(Html.GetLocalizedEnumSelectList<ESimplePrivacyStatus>(PrivacyStatusMapper.Map(Model.Video.InternalPrivacyStatus)))"></select>
                <input type="submit" class="btn btn-primary" value="@App.Resources.WebApp.Views.Video.Watch.SetArchivePrivacyStatusSubmit"/>
            </form>
        }
        @Context.SpanFor(Model.Video.PublishedAt ?? Model.Video.CreatedAt)
        @if (Model.Video.LikeCount != null)
        {
            <div>@string.Format(App.Resources.WebApp.Views.Video.Watch.LikesCount, Model.Video.LikeCount)</div>
        }
    </div>
    <span class="white-space-text-block card card-body">@Model.Video.Description</span>
</div>

<div>
    @if (Model.Video.LastCommentsFetch == null)
    {
        <h4>@App.Resources.WebApp.Views.Video.Watch.CommentsNotYetFetched</h4>
    }
    else
    {
        <h4>@App.Resources.WebApp.Views.Video.Watch.Comments</h4>
        <h6>@App.Resources.WebApp.Views.Video.Watch.CommentsLastFetched: @Context.SpanFor(Model.Video.LastCommentsFetch)</h6>
        @string.Format(App.Resources.WebApp.Views.Video.Watch.CommentsOnPlatformCount, Model.Video.CommentCount)<br/>
        @string.Format(App.Resources.WebApp.Views.Video.Watch.ArchivedRootCommentsCount, Model.Video.ArchivedRootCommentCount)<br/>
        @string.Format(App.Resources.WebApp.Views.Video.Watch.ArchivedTotalCommentsCount, Model.Video.ArchivedCommentCount)
        <partial name="_PaginationUiPartial" model="@PaginationViewModel"/>
        <div class="d-flex flex-column gap-1">
            @foreach (var comment in Model.Video.Comments)
            {
                <partial name="_CommentPartial" model="@comment"/>
            }
        </div>
    }
</div>

@functions
{
    bool VideoCanBeEmbedded => Model.Video.EmbedUrl != null || Model.Video.Url != null;
    bool ShowEmbedView => Model.EmbedView && VideoCanBeEmbedded;

    PaginationUiPartialViewModel PaginationViewModel => new()
    {
        ControllerName = nameof(VideoController),
        ActionName = nameof(VideoController.Watch),
        RouteValues = new { Model.Video.Id, Model.EmbedView },
        LimitParamName = nameof(Model.CommentsLimit),
        PageParamName = nameof(Model.CommentsPage),
        Limit = Model.CommentsLimit,
        Page = Model.CommentsPage,
        Total = Model.Video.ArchivedRootCommentCount,
        AmountOnPage = Model.Video.Comments.Count,
    };
}