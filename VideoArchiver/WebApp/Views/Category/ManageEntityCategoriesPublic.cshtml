@using Base.WebHelpers
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using App.BLL.DTO.Entities
@model WebApp.ViewModels.CategoryManageEntityCategoriesViewModel

@{
    ViewBag.Title = string.Format(App.Resources.WebApp.Views.Category.ManageEntityCategories.PageTitle, Model.EntityType);
}

<h2>@string.Format(App.Resources.WebApp.Views.Category.ManageEntityCategories.PageTitle, Model.EntityType)</h2>

<a href="@Model.ReturnUrl">@App.Resources.WebApp.Views.Category.ManageEntityCategories.Return</a>
<a asp-action="Create" asp-route-returnUrl="@Context.GetFullPath()">@App.Resources.WebApp.Views.Category.ManageEntityCategories.CreateNew</a>
<a asp-action="ManageEntityCategories" asp-route-returnUrl="@Model.ReturnUrl" asp-route-id="@Model.Id" asp-route-entityType="@Model.EntityType">
    @App.Resources.WebApp.Views.Category.ManageEntityCategories.ManagePersonalCategories
</a>

<div>
    <form method="post" asp-action="ManageEntityCategoriesPublic">
        @Html.HiddenFor(m => m.ReturnUrl)
        @Html.HiddenFor(m => m.Id)
        <table class="table">
            <thead>
            <tr>
                <th>@Html.DisplayNameFor(m => m.Categories[0].Name)</th>
                <th>@string.Format(App.Resources.WebApp.Views.Category.ManageEntityCategories.IsEntityInCategory, Html.Translate(Model.EntityType))</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var category in Model.Categories)
            {
                <tr>
                    <td>@category.Name</td>
                    <td>
                        <input type="checkbox" name="@Identifier(category)" value="true" checked="@Checked(category)"/>
                        <input type="checkbox" name="@Identifier(category)" value="false" checked="checked" class="d-none"/>
                    </td>
                </tr>
            }
            </tbody>
        </table>
        <input type="submit" class="btn btn-primary" value="@App.Resources.WebApp.Views.Category.ManageEntityCategories.Submit"/>
    </form>
</div>

@functions
{
    string Identifier(CategoryWithCreator category) =>
        $"{nameof(Model.SelectedCategoryIds)}[{category.Id}]";

    bool Checked(CategoryWithCreator category)
    {
        Model.SelectedCategoryIds.TryGetValue(category.Id, out var assigned);
        return assigned;
    }
}