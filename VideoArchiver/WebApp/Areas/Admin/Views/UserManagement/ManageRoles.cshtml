@using WebApp.Authorization
@model WebApp.Areas.Admin.ViewModels.ManageRolesViewModel

@{
    ViewBag.Title = string.Format(App.Resources.WebApp.Areas.Admin.Views.UserManagement.ManageRoles.PageTitle, Model.User.UserName);
}

<h2>@string.Format(App.Resources.WebApp.Areas.Admin.Views.UserManagement.ManageRoles.PageTitle, Model.User.UserName)</h2>
<a asp-action="Index">@App.Resources.WebApp.Areas.Admin.Views.UserManagement.ManageRoles.ReturnToUsers</a>

<div class="container">
    <div class="row">
        <div class="col-6">
            @foreach (var role in Model.User.Roles)
            {
                <div>
                    @role.Name
                    <form id="remove-@(role.Name)-form" asp-action="RemoveRole">
                        @Html.Hidden("userId", Model.User.Id)
                        @Html.Hidden("roleName", role.Name)
                        <input @DisabledFor(role.Name) type="submit" class="btn btn-danger" value="@App.Resources.WebApp.Areas.Admin.Views.UserManagement.ManageRoles.RemoveSubmit"/>
                    </form>
                </div>
                <br/>
            }
        </div>
        <div class="col-6">
            @foreach (var role in Model.OtherRoles)
            {
                <div>
                    @role
                    <form id="add-@(role)-form" asp-action="AddRole">
                        @Html.Hidden("userId", Model.User.Id)
                        @Html.Hidden("roleName", role)
                        <input @DisabledFor(role) type="submit" class="btn btn-success" value="@App.Resources.WebApp.Areas.Admin.Views.UserManagement.ManageRoles.AddSubmit"/>
                    </form>
                </div>
                <br/>
            }
        </div>
    </div>
</div>

@functions
{
    string DisabledFor(string roleName)
    {
        return !User.IsAllowedToManageRole(roleName) ? "disabled=\"disabled\"" : "";
    }
}
