// <auto-generated />

#nullable disable

using App.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;

namespace App.DAL.EF.Migrations.Postgres
{
    [DbContext(typeof(PostgresAppDbContext))]
    [Migration("20230505013411_VideoHistoryUpdate")]
    partial class VideoHistoryUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedToArchiveAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<ImageFile>>("Banners")
                        .HasColumnType("jsonb");

                    b.Property<LangString>("Bio")
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<bool>("Download")
                        .HasColumnType("boolean");

                    b.Property<string>("Etag")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.Property<string>("IdOnPlatform")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("InternalPrivacyStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastFetchOfficial")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastFetchUnofficial")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastSuccessfulFetchOfficial")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastSuccessfulFetchUnofficial")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Monitor")
                        .HasColumnType("boolean");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int?>("PrivacyStatus")
                        .HasColumnType("integer");

                    b.Property<List<ImageFile>>("ProfileImages")
                        .HasColumnType("jsonb");

                    b.Property<long?>("SubscriberCount")
                        .HasColumnType("bigint");

                    b.Property<List<ImageFile>>("Thumbnails")
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("Platform", "IdOnPlatform")
                        .IsUnique();

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("App.Domain.AuthorCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("AutoAssign")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("AuthorCategories");
                });

            modelBuilder.Entity("App.Domain.AuthorHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<List<ImageFile>>("Banners")
                        .HasColumnType("jsonb");

                    b.Property<LangString>("Bio")
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("IdOnPlatform")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("InternalPrivacyStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastValidAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<ImageFile>>("ProfileImages")
                        .HasColumnType("jsonb");

                    b.Property<int?>("SubscriberCount")
                        .HasColumnType("integer");

                    b.Property<List<ImageFile>>("Thumbnails")
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("AuthorHistories");
                });

            modelBuilder.Entity("App.Domain.AuthorPubSub", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("LeaseDuration")
                        .HasColumnType("interval");

                    b.Property<DateTime>("LeasedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("AuthorPubSubs");
                });

            modelBuilder.Entity("App.Domain.AuthorRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<Guid>("RatedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RaterId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("RatedId");

                    b.HasIndex("RaterId");

                    b.ToTable("AuthorRatings");
                });

            modelBuilder.Entity("App.Domain.AuthorSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastFetched")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubscriberId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubscriptionTargetId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubscriberId");

                    b.HasIndex("SubscriptionTargetId");

                    b.ToTable("AuthorSubscriptions");
                });

            modelBuilder.Entity("App.Domain.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAssignable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<LangString>("Name")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Platform")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("SupportsAuthors")
                        .HasColumnType("boolean");

                    b.Property<bool>("SupportsPlaylists")
                        .HasColumnType("boolean");

                    b.Property<bool>("SupportsVideos")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("App.Domain.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedToArchiveAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("AuthorIsCreator")
                        .HasColumnType("boolean");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<Guid?>("ConversationRootId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan?>("CreatedAtVideoTimecode")
                        .HasColumnType("interval");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DislikeCount")
                        .HasColumnType("integer");

                    b.Property<string>("Etag")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.Property<string>("IdOnPlatform")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("InternalPrivacyStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsFavorited")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastFetchOfficial")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastFetchUnofficial")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastSuccessfulFetchOfficial")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastSuccessfulFetchUnofficial")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LikeCount")
                        .HasColumnType("integer");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int?>("PrivacyStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("ReplyCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ReplyTargetId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ConversationRootId");

                    b.HasIndex("ReplyTargetId");

                    b.HasIndex("VideoId");

                    b.HasIndex("Platform", "IdOnPlatform")
                        .IsUnique();

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("App.Domain.CommentHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int?>("DislikeCount")
                        .HasColumnType("integer");

                    b.Property<string>("IdOnPlatform")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("InternalPrivacyStatus")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsFavorited")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastValidAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LikeCount")
                        .HasColumnType("integer");

                    b.Property<int?>("ReplyCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.ToTable("CommentHistories");
                });

            modelBuilder.Entity("App.Domain.CommentReplyNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReplyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("ReplyId");

                    b.ToTable("CommentReplyNotifications");
                });

            modelBuilder.Entity("App.Domain.ExternalUserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("ExpiresIn")
                        .HasColumnType("interval");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.Property<string>("Scope")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("TokenType")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("UserId");

                    b.ToTable("ExternalUserTokens");
                });

            modelBuilder.Entity("App.Domain.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BoxArtUrl")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.Property<string>("Etag")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.Property<string>("IgdbId")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<DateTime>("LastFetched")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastSuccessfulFetch")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("App.Domain.Identity.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("PreviousExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PreviousRefreshToken")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("App.Domain.Identity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("App.Domain.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("App.Domain.Identity.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("App.Domain.Playlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedToArchiveAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<LangString>("Description")
                        .HasColumnType("jsonb");

                    b.Property<bool>("Download")
                        .HasColumnType("boolean");

                    b.Property<string>("Etag")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.Property<string>("IdOnPlatform")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("InternalPrivacyStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastFetchOfficial")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastFetchUnofficial")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastSuccessfulFetchOfficial")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastSuccessfulFetchUnofficial")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastVideosFetch")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Monitor")
                        .HasColumnType("boolean");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int?>("PrivacyStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<string>>("Tags")
                        .HasColumnType("text[]");

                    b.Property<List<ImageFile>>("Thumbnails")
                        .HasColumnType("jsonb");

                    b.Property<LangString>("Title")
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Platform", "IdOnPlatform")
                        .IsUnique();

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("App.Domain.PlaylistAuthor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlaylistId")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PlaylistId");

                    b.ToTable("PlaylistAuthors");
                });

            modelBuilder.Entity("App.Domain.PlaylistCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AutoAssign")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlaylistId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PlaylistId");

                    b.ToTable("PlaylistCategories");
                });

            modelBuilder.Entity("App.Domain.PlaylistHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<LangString>("Description")
                        .HasColumnType("jsonb");

                    b.Property<string>("IdOnPlatform")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("InternalPrivacyStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastValidAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PlaylistId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<ImageFile>>("Tags")
                        .HasColumnType("jsonb");

                    b.Property<List<ImageFile>>("Thumbnails")
                        .HasColumnType("jsonb");

                    b.Property<LangString>("Title")
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistId");

                    b.ToTable("PlaylistHistories");
                });

            modelBuilder.Entity("App.Domain.PlaylistRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<Guid>("PlaylistId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PlaylistId");

                    b.ToTable("PlaylistRatings");
                });

            modelBuilder.Entity("App.Domain.PlaylistSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlaylistId")
                        .HasColumnType("uuid");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubscriberId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("PlaylistSubscriptions");
                });

            modelBuilder.Entity("App.Domain.PlaylistVideo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("AddedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlaylistId")
                        .HasColumnType("uuid");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("RemovedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("RemovedById");

                    b.HasIndex("VideoId");

                    b.ToTable("PlaylistVideos");
                });

            modelBuilder.Entity("App.Domain.PlaylistVideoPositionHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlaylistVideoId")
                        .HasColumnType("uuid");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ValidSince")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistVideoId");

                    b.ToTable("PlaylistVideoPositionHistories");
                });

            modelBuilder.Entity("App.Domain.QueueItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("AddedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ApprovedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Download")
                        .HasColumnType("boolean");

                    b.Property<string>("IdOnPlatform")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("Monitor")
                        .HasColumnType("boolean");

                    b.Property<string>("Platform")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid?>("PlaylistId")
                        .HasColumnType("uuid");

                    b.Property<string>("Url")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.Property<Guid?>("VideoId")
                        .HasColumnType("uuid");

                    b.Property<string>("WebHookUrl")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.Property<string>("WebhookData")
                        .HasColumnType("text");

                    b.Property<string>("WebhookSecret")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("VideoId");

                    b.ToTable("QueueItems");
                });

            modelBuilder.Entity("App.Domain.StatusChangeEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("NewAvailability")
                        .HasColumnType("boolean");

                    b.Property<int?>("NewPrivacyStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("PlaylistId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("PreviousAvailability")
                        .HasColumnType("boolean");

                    b.Property<int?>("PreviousPrivacyStatus")
                        .HasColumnType("integer");

                    b.Property<Guid?>("VideoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("VideoId");

                    b.ToTable("StatusChangeEvents");
                });

            modelBuilder.Entity("App.Domain.StatusChangeNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StatusChangeEventId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("StatusChangeEventId");

                    b.ToTable("StatusChangeNotifications");
                });

            modelBuilder.Entity("App.Domain.Video", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedToArchiveAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AutomaticCaptions")
                        .HasColumnType("jsonb");

                    b.Property<string>("Captions")
                        .HasColumnType("jsonb");

                    b.Property<long?>("CommentCount")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DefaultAudioLanguage")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("DefaultLanguage")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<LangString>("Description")
                        .HasColumnType("jsonb");

                    b.Property<long?>("DislikeCount")
                        .HasColumnType("bigint");

                    b.Property<bool>("Download")
                        .HasColumnType("boolean");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("interval");

                    b.Property<string>("Etag")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.Property<string>("IdOnPlatform")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("InternalPrivacyStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsLivestreamRecording")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastCommentsFetch")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastFetchOfficial")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastFetchUnofficial")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastSuccessfulFetchOfficial")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastSuccessfulFetchUnofficial")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("LikeCount")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LivestreamEndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LivestreamStartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<VideoFile>>("LocalVideoFiles")
                        .HasColumnType("jsonb");

                    b.Property<bool>("Monitor")
                        .HasColumnType("boolean");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int?>("PrivacyStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("RecordedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StreamId")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<List<string>>("Tags")
                        .HasColumnType("text[]");

                    b.Property<List<ImageFile>>("Thumbnails")
                        .HasColumnType("jsonb");

                    b.Property<LangString>("Title")
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("ViewCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Platform", "IdOnPlatform")
                        .IsUnique();

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("App.Domain.VideoAuthor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("VideoId");

                    b.ToTable("VideoAuthors");
                });

            modelBuilder.Entity("App.Domain.VideoCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AutoAssign")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("VideoId");

                    b.ToTable("VideoCategories");
                });

            modelBuilder.Entity("App.Domain.VideoGame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BoxArtUrl")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.Property<TimeSpan?>("FromTimecode")
                        .HasColumnType("interval");

                    b.Property<Guid?>("GameId")
                        .HasColumnType("uuid");

                    b.Property<string>("IdOnPlatform")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("IgdbId")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("Name")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Platform")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<TimeSpan?>("ToTimecode")
                        .HasColumnType("interval");

                    b.Property<DateTime?>("ValidSince")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("VideoId");

                    b.ToTable("VideoGames");
                });

            modelBuilder.Entity("App.Domain.VideoHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AutomaticCaptions")
                        .HasColumnType("jsonb");

                    b.Property<string>("Captions")
                        .HasColumnType("jsonb");

                    b.Property<long?>("CommentCount")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DefaultAudioLanguage")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("DefaultLanguage")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<LangString>("Description")
                        .HasColumnType("jsonb");

                    b.Property<long?>("DislikeCount")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("interval");

                    b.Property<string>("IdOnPlatform")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("InternalPrivacyStatus")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsLivestreamRecording")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastValidAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("LikeCount")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LivestreamEndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LivestreamStartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<VideoFile>>("LocalVideoFiles")
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("RecordedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StreamId")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<List<string>>("Tags")
                        .HasColumnType("text[]");

                    b.Property<List<ImageFile>>("Thumbnails")
                        .HasColumnType("jsonb");

                    b.Property<LangString>("Title")
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("uuid");

                    b.Property<long?>("ViewCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VideoId");

                    b.ToTable("VideoHistories");
                });

            modelBuilder.Entity("App.Domain.VideoRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("VideoId");

                    b.ToTable("VideoRatings");
                });

            modelBuilder.Entity("App.Domain.VideoUploadNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("VideoId");

                    b.ToTable("VideoUploadNotifications");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("App.Domain.Author", b =>
                {
                    b.HasOne("App.Domain.Identity.User", "User")
                        .WithMany("Authors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.AuthorCategory", b =>
                {
                    b.HasOne("App.Domain.Author", "Author")
                        .WithMany("AuthorCategories")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Category", "Category")
                        .WithMany("AuthorCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("App.Domain.AuthorHistory", b =>
                {
                    b.HasOne("App.Domain.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("App.Domain.AuthorPubSub", b =>
                {
                    b.HasOne("App.Domain.Author", "Author")
                        .WithMany("AuthorPubSubs")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("App.Domain.AuthorRating", b =>
                {
                    b.HasOne("App.Domain.Category", "Category")
                        .WithMany("AuthorRatings")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Author", "Rated")
                        .WithMany("ReceivedAuthorRatings")
                        .HasForeignKey("RatedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Author", "Rater")
                        .WithMany("AuthorRatings")
                        .HasForeignKey("RaterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Rated");

                    b.Navigation("Rater");
                });

            modelBuilder.Entity("App.Domain.AuthorSubscription", b =>
                {
                    b.HasOne("App.Domain.Author", "Subscriber")
                        .WithMany("SubscribedAuthorSubscriptions")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Author", "SubscriptionTarget")
                        .WithMany("SubscriberAuthorSubscriptions")
                        .HasForeignKey("SubscriptionTargetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subscriber");

                    b.Navigation("SubscriptionTarget");
                });

            modelBuilder.Entity("App.Domain.Category", b =>
                {
                    b.HasOne("App.Domain.Author", "Creator")
                        .WithMany("Categories")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Domain.Category", "ParentCategory")
                        .WithMany("DirectChildCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("App.Domain.Comment", b =>
                {
                    b.HasOne("App.Domain.Author", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Comment", "ConversationRoot")
                        .WithMany("ConversationReplies")
                        .HasForeignKey("ConversationRootId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Domain.Comment", "ReplyTarget")
                        .WithMany("DirectReplies")
                        .HasForeignKey("ReplyTargetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Domain.Video", "Video")
                        .WithMany("Comments")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("ConversationRoot");

                    b.Navigation("ReplyTarget");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("App.Domain.CommentHistory", b =>
                {
                    b.HasOne("App.Domain.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("App.Domain.CommentReplyNotification", b =>
                {
                    b.HasOne("App.Domain.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Author", "Receiver")
                        .WithMany("CommentReplyNotifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Comment", "Reply")
                        .WithMany()
                        .HasForeignKey("ReplyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Receiver");

                    b.Navigation("Reply");
                });

            modelBuilder.Entity("App.Domain.ExternalUserToken", b =>
                {
                    b.HasOne("App.Domain.Author", "Author")
                        .WithMany("ExternalUserTokens")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Identity.User", "User")
                        .WithMany("ExternalUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Identity.RefreshToken", b =>
                {
                    b.HasOne("App.Domain.Identity.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Identity.UserRole", b =>
                {
                    b.HasOne("App.Domain.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.PlaylistAuthor", b =>
                {
                    b.HasOne("App.Domain.Author", "Author")
                        .WithMany("PlaylistAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Playlist", "Playlist")
                        .WithMany("PlaylistAuthors")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("App.Domain.PlaylistCategory", b =>
                {
                    b.HasOne("App.Domain.Category", "Category")
                        .WithMany("PlaylistCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Playlist", "Playlist")
                        .WithMany("PlaylistCategories")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("App.Domain.PlaylistHistory", b =>
                {
                    b.HasOne("App.Domain.Playlist", "Playlist")
                        .WithMany("PlaylistHistories")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("App.Domain.PlaylistRating", b =>
                {
                    b.HasOne("App.Domain.Author", "Author")
                        .WithMany("PlaylistRatings")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Category", "Category")
                        .WithMany("PlaylistRatings")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Playlist", "Playlist")
                        .WithMany("PlaylistRatings")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("App.Domain.PlaylistSubscription", b =>
                {
                    b.HasOne("App.Domain.Playlist", "Playlist")
                        .WithMany("PlaylistSubscriptions")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Author", "Subscriber")
                        .WithMany("PlaylistSubscriptions")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Subscriber");
                });

            modelBuilder.Entity("App.Domain.PlaylistVideo", b =>
                {
                    b.HasOne("App.Domain.Author", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Domain.Playlist", "Playlist")
                        .WithMany("PlaylistVideos")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Author", "RemovedBy")
                        .WithMany()
                        .HasForeignKey("RemovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Domain.Video", "Video")
                        .WithMany()
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AddedBy");

                    b.Navigation("Playlist");

                    b.Navigation("RemovedBy");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("App.Domain.PlaylistVideoPositionHistory", b =>
                {
                    b.HasOne("App.Domain.PlaylistVideo", "PlaylistVideo")
                        .WithMany("PositionHistories")
                        .HasForeignKey("PlaylistVideoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PlaylistVideo");
                });

            modelBuilder.Entity("App.Domain.QueueItem", b =>
                {
                    b.HasOne("App.Domain.Identity.User", "AddedBy")
                        .WithMany("AddedQueueItems")
                        .HasForeignKey("AddedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Identity.User", "ApprovedBy")
                        .WithMany("ApprovedQueueItems")
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Domain.Author", "Author")
                        .WithMany("QueueItems")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Domain.Playlist", "Playlist")
                        .WithMany("QueueItems")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Domain.Video", "Video")
                        .WithMany()
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AddedBy");

                    b.Navigation("ApprovedBy");

                    b.Navigation("Author");

                    b.Navigation("Playlist");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("App.Domain.StatusChangeEvent", b =>
                {
                    b.HasOne("App.Domain.Author", "Author")
                        .WithMany("StatusChangeEvents")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Domain.Playlist", "Playlist")
                        .WithMany("StatusChangeEvents")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Domain.Video", "Video")
                        .WithMany("StatusChangeEvents")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Author");

                    b.Navigation("Playlist");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("App.Domain.StatusChangeNotification", b =>
                {
                    b.HasOne("App.Domain.Identity.User", "Receiver")
                        .WithMany("StatusChangeNotifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.StatusChangeEvent", "StatusChangeEvent")
                        .WithMany()
                        .HasForeignKey("StatusChangeEventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("StatusChangeEvent");
                });

            modelBuilder.Entity("App.Domain.VideoAuthor", b =>
                {
                    b.HasOne("App.Domain.Author", "Author")
                        .WithMany("VideoAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Video", "Video")
                        .WithMany("VideoAuthors")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("App.Domain.VideoCategory", b =>
                {
                    b.HasOne("App.Domain.Category", "Category")
                        .WithMany("VideoCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Video", "Video")
                        .WithMany("VideoCategories")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("App.Domain.VideoGame", b =>
                {
                    b.HasOne("App.Domain.Game", "Game")
                        .WithMany("VideoGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Domain.Video", "Video")
                        .WithMany("VideoGames")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("App.Domain.VideoHistory", b =>
                {
                    b.HasOne("App.Domain.Video", "Video")
                        .WithMany("VideoHistories")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Video");
                });

            modelBuilder.Entity("App.Domain.VideoRating", b =>
                {
                    b.HasOne("App.Domain.Author", "Author")
                        .WithMany("VideoRatings")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Category", "Category")
                        .WithMany("VideoRatings")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Video", "Video")
                        .WithMany("VideoRatings")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("App.Domain.VideoUploadNotification", b =>
                {
                    b.HasOne("App.Domain.Author", "Receiver")
                        .WithMany("VideoUploadNotifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Video", "Video")
                        .WithMany()
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("App.Domain.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("App.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("App.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("App.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Author", b =>
                {
                    b.Navigation("AuthorCategories");

                    b.Navigation("AuthorPubSubs");

                    b.Navigation("AuthorRatings");

                    b.Navigation("Categories");

                    b.Navigation("CommentReplyNotifications");

                    b.Navigation("Comments");

                    b.Navigation("ExternalUserTokens");

                    b.Navigation("PlaylistAuthors");

                    b.Navigation("PlaylistRatings");

                    b.Navigation("PlaylistSubscriptions");

                    b.Navigation("QueueItems");

                    b.Navigation("ReceivedAuthorRatings");

                    b.Navigation("StatusChangeEvents");

                    b.Navigation("SubscribedAuthorSubscriptions");

                    b.Navigation("SubscriberAuthorSubscriptions");

                    b.Navigation("VideoAuthors");

                    b.Navigation("VideoRatings");

                    b.Navigation("VideoUploadNotifications");
                });

            modelBuilder.Entity("App.Domain.Category", b =>
                {
                    b.Navigation("AuthorCategories");

                    b.Navigation("AuthorRatings");

                    b.Navigation("DirectChildCategories");

                    b.Navigation("PlaylistCategories");

                    b.Navigation("PlaylistRatings");

                    b.Navigation("VideoCategories");

                    b.Navigation("VideoRatings");
                });

            modelBuilder.Entity("App.Domain.Comment", b =>
                {
                    b.Navigation("ConversationReplies");

                    b.Navigation("DirectReplies");
                });

            modelBuilder.Entity("App.Domain.Game", b =>
                {
                    b.Navigation("VideoGames");
                });

            modelBuilder.Entity("App.Domain.Identity.User", b =>
                {
                    b.Navigation("AddedQueueItems");

                    b.Navigation("ApprovedQueueItems");

                    b.Navigation("Authors");

                    b.Navigation("ExternalUserTokens");

                    b.Navigation("RefreshTokens");

                    b.Navigation("StatusChangeNotifications");
                });

            modelBuilder.Entity("App.Domain.Playlist", b =>
                {
                    b.Navigation("PlaylistAuthors");

                    b.Navigation("PlaylistCategories");

                    b.Navigation("PlaylistHistories");

                    b.Navigation("PlaylistRatings");

                    b.Navigation("PlaylistSubscriptions");

                    b.Navigation("PlaylistVideos");

                    b.Navigation("QueueItems");

                    b.Navigation("StatusChangeEvents");
                });

            modelBuilder.Entity("App.Domain.PlaylistVideo", b =>
                {
                    b.Navigation("PositionHistories");
                });

            modelBuilder.Entity("App.Domain.Video", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("StatusChangeEvents");

                    b.Navigation("VideoAuthors");

                    b.Navigation("VideoCategories");

                    b.Navigation("VideoGames");

                    b.Navigation("VideoHistories");

                    b.Navigation("VideoRatings");
                });
#pragma warning restore 612, 618
        }
    }
}
